#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# Fail fast
set -e
set -o pipefail

# Debug
# set -x

# Parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR=$(cd "$(dirname "$0")"; cd ..; pwd)

# Load formating tools
source "$BUILDPACK_DIR/bin/common.sh"

# Setup apt environment
APT_DIR="$BUILD_DIR/.apt"
APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_REPO_FILE="$BUILDPACK_DIR/etc/datadog.list"
APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

# Create build and run environment
mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"
mkdir -p "$APT_DIR"

# Install dependencies
topic "Updating apt caches for dependencies"
apt-get $APT_OPTIONS update | indent

topic "Installing dependencies"
DEPS="libpci-dev libpci3 libsensors4 libsensors4-dev libsnmp-base libsnmp30"
apt-get $APT_OPTIONS -y --force-yes -d install --reinstall --no-install-recommends $DEPS | indent
IFS=" " read -a DEP_PKGS <<< "$DEPS"
for DEP in ${DEP_PKGS[@]}; do
  echo "Installing $DEP" | indent
  ls -t "$APT_CACHE_DIR"/archives/"$DEP"\_*.deb | head -1 | xargs -i dpkg -x '{}' "$APT_DIR"
done

# Install GPG key
topic "Install gpg key for Datadog APT Repository"
APT_KEYRING="$CACHE_DIR/apt/trusted.gpg"
GPG_KEY_FILE="$BUILDPACK_DIR/etc/datadog.gpg"
GPG_HOME_DIR="$BUILD_DIR/.gnupg"
mkdir -p "$GPG_HOME_DIR"
gpg --ignore-time-conflict --no-options --no-default-keyring --homedir "$GPG_HOME_DIR" --keyring "$APT_KEYRING" --import "$GPG_KEY_FILE" | indent

# Install Datadog Agent
topic "Updating apt caches for Datadog Agent"
APT_OPTIONS="$APT_OPTIONS -o Dir::Etc::Trusted=$APT_KEYRING -o Dir::Etc::SourceList=$APT_REPO_FILE"
apt-get $APT_OPTIONS update | indent

# If a version has been specified, validate it, then install it.
# Compile script must read env vars from the env var files.
if [ -f "$ENV_DIR/DD_AGENT_VERSION" ]; then
  DD_AGENT_VERSION=$(cat "$ENV_DIR/DD_AGENT_VERSION")

  # Accommodate for earlier pinned versions. Give deprecation warning.
  if [[ "$DD_AGENT_VERSION" == *"_amd64" ]]; then
    # Update the version to remove "_amd64"
    DD_AGENT_VERSION=${DD_AGENT_VERSION/_amd64/}
    topic "WARNING: Version pinning has been updated. Please update your pinned version to $DD_AGENT_VERSION"
    echo "To update, run: heroku config:set DD_AGENT_VERSION=$DD_AGENT_VERSION" | indent
  fi

  AGENT_VERSIONS=$(apt-cache $APT_OPTIONS show datadog-agent | grep "Version: ")
  AGENT_VERSIONS=$(sed 's/Version: 1://g' <<<"$AGENT_VERSIONS")

  # If specified version doesn't exist, list available versions.
  if [ -z $(echo "$AGENT_VERSIONS" | grep -x "$DD_AGENT_VERSION") ]; then
    topic "ERROR: Version \"$DD_AGENT_VERSION\" was not found."
    echo "Available versions:" | indent
    echo "$AGENT_VERSIONS" | indent
    exit 1
  fi
else
  # If no version is explicitly set, do so here.
  # In order to prevent unforseen issues from new Agent releases,
  # we now specify a default version in this buildpack.
  DD_AGENT_VERSION="6.14.0-1"
fi
# Set the  specified version.
PACKAGE="datadog-agent=1:$DD_AGENT_VERSION"

topic "Downloading Datadog Agent $DD_AGENT_VERSION"
apt-get $APT_OPTIONS -y --force-yes -d install --reinstall --no-install-recommends "$PACKAGE" | indent

DPKG_STUB="$APT_CACHE_DIR/archives/datadog-agent_1%3a"
if [ -z $DD_AGENT_VERSION ]; then
  DEB=$(ls -t "$DPKG_STUB"*.deb | head -n 1)
  DD_AGENT_VERSION=${DEB:${#DPKG_STUB}:(${#DEB}-${#DPKG_STUB}-10)}
  echo "Latest version is \"$DD_AGENT_VERSION\". To pin this version, run: heroku config:set DD_AGENT_VERSION=$DD_AGENT_VERSION" | indent
else
  DEB="$DPKG_STUB""$DD_AGENT_VERSION"_amd64.deb
fi

topic "Installing Datadog Agent"
dpkg -x "$DEB" "$APT_DIR"

# Removing unneeded content
rm -rf "$APT_DIR"/opt/datadog-agent/sources \
       "$APT_DIR"/opt/datadog-agent/embedded/share/doc \
       "$APT_DIR"/opt/datadog-agent/embedded/share/man

# Remove Cryptodome Selftest
rm -rf "$APT_DIR"/opt/datadog-agent/embedded/lib/python*/site-packages/Cryptodome/SelfTest

# Remove integrations that are not relevant for Heroku
for i in "${DELETE_INTEGRATIONS[@]}"; do
  rm -rf "$APT_DIR"/opt/datadog-agent/embedded/lib/python*/site-packages/datadog_checks/"$i"
done


# Prior to Agent 6.14 there was only 1 python version
DD_AGENT_MULT_PYTHON_VERSION="6.14"
if [ "$DD_AGENT_VERSION" == "$(echo -e "$DD_AGENT_MULT_PYTHON_VERSION\n$DD_AGENT_VERSION" | sort -V | head -n1)" ]; then
  NUM_PYTHON="1"
else
  NUM_PYTHON="2"
fi

# If we have 2 python versions, we remove the one that wasn't selected
if [ "$NUM_PYTHON" = "2" ]; then
  if [ -f "$ENV_DIR/DD_PYTHON_VERSION" ]; then
    DD_PYTHON_VERSION=$(cat "$ENV_DIR/DD_PYTHON_VERSION")
    if [ "$DD_PYTHON_VERSION" != "2" ] && [ "$DD_PYTHON_VERSION" != "3" ]; then
      topic "ERROR: Wrong Python version: \"$DD_PYTHON_VERSION\"."
      echo "Set DD_PYTHON_VERSION to either 2 or 3." | indent
      exit 1
    fi
  else
    DD_PYTHON_VERSION="2" # if not specified, we default to Python 2
  fi

  # We remove the unneeded version of Python and update symlinks
  if [ "$DD_PYTHON_VERSION" = "2" ]; then
    PYTHON_VERSION="2.7"
    rm -rf "$APT_DIR"/opt/datadog-agent/embedded/lib/python3.*
    rm "$APT_DIR"/opt/datadog-agent/embedded/bin/pip3*
    rm "$APT_DIR"/opt/datadog-agent/embedded/bin/python3*
    rm "$APT_DIR"/opt/datadog-agent/embedded/bin/pydoc3*
    ln -sfn "$APT_DIR"/opt/datadog-agent/embedded/bin/python${PYTHON_VERSION} "$APT_DIR"/opt/datadog-agent/embedded/bin/python
    ln -sfn "$APT_DIR"/opt/datadog-agent/embedded/bin/python${PYTHON_VERSION}-config "$APT_DIR"/opt/datadog-agent/embedded/bin/python-config
    ln -sfn "$APT_DIR"/opt/datadog-agent/embedded/bin/pip${PYTHON_VERSION} "$APT_DIR"/opt/datadog-agent/embedded/bin/pip
  fi
  if [ "$DD_PYTHON_VERSION" = "3" ]; then
    PYTHON_VERSION="3.7"
    rm -rf "$APT_DIR"/opt/datadog-agent/embedded/lib/python2.*
    rm "$APT_DIR"/opt/datadog-agent/embedded/bin/pip2*
    rm "$APT_DIR"/opt/datadog-agent/embedded/bin/python2*
    rm "$APT_DIR"/opt/datadog-agent/embedded/bin/pydoc*
    ln -sfn "$APT_DIR"/opt/datadog-agent/embedded/bin/python${PYTHON_VERSION} "$APT_DIR"/opt/datadog-agent/embedded/bin/python
    ln -sfn "$APT_DIR"/opt/datadog-agent/embedded/bin/python${PYTHON_VERSION}-config "$APT_DIR"/opt/datadog-agent/embedded/bin/python-config
    ln -sfn "$APT_DIR"/opt/datadog-agent/embedded/bin/pip${PYTHON_VERSION} "$APT_DIR"/opt/datadog-agent/embedded/bin/pip
  fi
fi

# Rewrite package-config files
find "$APT_DIR" -type f -ipath '*/pkgconfig/*.pc' | xargs --no-run-if-empty -n 1 sed -i -e 's!^prefix=\(.*\)$!prefix='"$APT_DIR"'\1!g'

# Install the runner
topic "Installing Datadog runner"
mkdir -p "$BUILD_DIR/.profile.d"
cp "$BUILDPACK_DIR/extra/datadog.sh" "$BUILD_DIR/.profile.d/"
chmod +x "$BUILD_DIR/.profile.d/datadog.sh"
